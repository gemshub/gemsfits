01. main.cpp(108). Creating new TGfitTask
02. data_manager.cpp(51). Reading database parameter get_db_specs(); 
03. data_manager.cpp(55). Getting data form the EJDB database; 
05. data_manager.cpp(365). Adding the data returned by the selection query into the data structure; 
04. data_manager.cpp(58). Getting distinct T and P pairs; 
09. optimization.cpp(48). Reading NLopt optimization settings from the input file; 
10. gemsfit_task.cpp(94). Initializing the Target function structure & get_DatTarget(); 
06. gemsfit_task.cpp(89). Initializing nodes with the experimental data; 
07. gemsfit_task.cpp(92). Initializing optimization structure; 
11. gemsfit_task.cpp(152). Initializing optimization init_optim(); 
 ... initializing optimization object in build_optim() ... 
 ... performing parameter normalization ... 
     Init guess [0] = -899506
     Upper Bound old [0]= -889506
     Upper Bound new [0]= -0.988883
     Init guess [1] = -1.10174e+06
     Upper Bound old [1]= -1.09174e+06
     Upper Bound new [1]= -0.990923
     Init guess [2] = -1.30581e+06
     Upper Bound old [2]= -1.29581e+06
     Upper Bound new [2]= -0.992342
     Init guess [3] = -487478
     Upper Bound old [3]= -477478
     Upper Bound new [3]= -0.979486
     Init guess [4] = -1.10617e+06
     Upper Bound old [4]= -1.09617e+06
     Upper Bound new [4]= -0.99096
     Init guess [0] = -899506
     Lower Bound old [0]= -909506
     Lower Bound new [0]= -1.01112
     Init guess [1] = -1.10174e+06
     Lower Bound old [1]= -1.11174e+06
     Lower Bound new [1]= -1.00908
     Init guess [2] = -1.30581e+06
     Lower Bound old [2]= -1.31581e+06
     Lower Bound new [2]= -1.00766
     Init guess [3] = -487478
     Lower Bound old [3]= -497478
     Lower Bound new [3]= -1.02051
     Init guess [4] = -1.10617e+06
     Lower Bound old [4]= -1.11617e+06
     Lower Bound new [4]= -1.00904
... assigning bounds and tolerance for optimization...

12. in gemsfit_task.cpp(287). Setting target (objective) function to minimize.
13. gemsfit_task.cpp(308). Performing optimization.
~ m.count.= 1 sum.res.= 5.57899575072805
~ m.count.= 2 sum.res.= 6.86732094655536
~ m.count.= 3 sum.res.= 6.6145157434827
~ m.count.= 4 sum.res.= 29.9427683347587
~ m.count.= 5 sum.res.= 9.15237287211359
~ m.count.= 6 sum.res.= 5.57669010250805
~ m.count.= 7 sum.res.= 5.88878464449946
~ m.count.= 8 sum.res.= 4.00719429288769
~ m.count.= 9 sum.res.= 12.3143299398632
~ m.count.= 10 sum.res.= 33.1135276490156
~ m.count.= 11 sum.res.= 5.59029408842476
~ m.count.= 12 sum.res.= 4.4533303031527
~ m.count.= 13 sum.res.= 1.48540621560629
~ m.count.= 14 sum.res.= 1.59222451628863
~ m.count.= 15 sum.res.= 1.9070332912514
~ m.count.= 16 sum.res.= 1.61401585882351
~ m.count.= 17 sum.res.= 1.91820766924969
~ m.count.= 18 sum.res.= 1.70151530780886
~ m.count.= 19 sum.res.= 1.52602334678296
~ m.count.= 20 sum.res.= 1.34616506714506
~ m.count.= 21 sum.res.= 1.21935839099589
~ m.count.= 22 sum.res.= 1.26233410377716
~ m.count.= 23 sum.res.= 1.24341641712436
~ m.count.= 24 sum.res.= 1.19630642122301
~ m.count.= 25 sum.res.= 1.18628354708859
~ m.count.= 26 sum.res.= 1.17906145169766
~ m.count.= 27 sum.res.= 1.18304870065635
~ m.count.= 28 sum.res.= 1.13769085924151
~ m.count.= 29 sum.res.= 1.18696816096919
~ m.count.= 30 sum.res.= 1.13063918914958
~ m.count.= 31 sum.res.= 1.12834410901794
~ m.count.= 32 sum.res.= 1.13041793682395
~ m.count.= 33 sum.res.= 1.18874471138156
~ m.count.= 34 sum.res.= 1.12635821951487
~ m.count.= 35 sum.res.= 1.19480713359905
~ m.count.= 36 sum.res.= 1.12079641378255
~ m.count.= 37 sum.res.= 1.11554361620382
~ m.count.= 38 sum.res.= 1.11578494990269
~ m.count.= 39 sum.res.= 1.11462521270058
~ m.count.= 40 sum.res.= 1.11749325178109
~ m.count.= 41 sum.res.= 1.23852631391193
~ m.count.= 42 sum.res.= 1.11709281957505
~ m.count.= 43 sum.res.= 1.11425076700322
~ m.count.= 44 sum.res.= 1.11261505158041
~ m.count.= 45 sum.res.= 1.11240336395164
~ m.count.= 46 sum.res.= 1.11135763513672
~ m.count.= 47 sum.res.= 1.11129585520471
~ m.count.= 48 sum.res.= 1.1154544915847
~ m.count.= 49 sum.res.= 1.11098498980962
~ m.count.= 50 sum.res.= 1.11102640540516
~ m.count.= 51 sum.res.= 1.11371170588312
~ m.count.= 52 sum.res.= 1.11156759931073
~ m.count.= 53 sum.res.= 1.11243193763777
~ m.count.= 54 sum.res.= 1.1112788919991
~ m.count.= 55 sum.res.= 1.11087261207498
~ m.count.= 56 sum.res.= 1.11095717112586
~ m.count.= 57 sum.res.= 1.11121259424627
~ m.count.= 58 sum.res.= 1.11107081711075
~ m.count.= 59 sum.res.= 1.11116631417182
~ m.count.= 60 sum.res.= 1.11096259495332
~ m.count.= 61 sum.res.= 1.11132097418318
~ m.count.= 62 sum.res.= 1.11114456244022
optv[0] = -1.00181090253424
size of optv = 5
14. gemsfit_task.cpp(317). Finished optimization; 
~ m.count.= 63 sum.res.= 1.11085814067717
found minimum at <<f( -1.00181090253424 -1.00416752647288 -1.00094037359462 -0.995743143082264 -1.00148928394473 ) = 1.11087261207498
 after 63 evaluations.

15. Back in main.cpp(122). Performing statistics ...
~ m.count.= 64 sum.res.= 1.1113127161819
~ m.count.= 65 sum.res.= 1.11116212353007
~ m.count.= 66 sum.res.= 1.11153993360901
~ m.count.= 67 sum.res.= 1.11188281004657
~ m.count.= 68 sum.res.= 1.12015851023419
~ m.count.= 69 sum.res.= 1.12102946592847
~ m.count.= 70 sum.res.= 1.11151336879007
~ m.count.= 71 sum.res.= 1.11160546888111
~ m.count.= 72 sum.res.= 1.11035955327721
~ m.count.= 73 sum.res.= 1.11072831635996
~ m.count.= 74 sum.res.= 1.11041774899634
16. main.cpp(152): finished in 110.972825 seconds. GEMSFITS: End. Bye!
