01. main.cpp(108). Creating new TGfitTask
02. data_manager.cpp(51). Reading database parameter get_db_specs(); 
03. data_manager.cpp(55). Getting data form the EJDB database; 
05. data_manager.cpp(365). Adding the data returned by the selection query into the data structure; 
04. data_manager.cpp(58). Getting distinct T and P pairs; 
06. gemsfit_task.cpp(89). Initializing nodes with the experimental data; 
07. gemsfit_task.cpp(92). Initializing optimization structure; 
09. optimization.cpp(48). Reading NLopt optimization settings from the input file; 
10. gemsfit_task.cpp(94). Initializing the Target function structure & get_DatTarget(); 
11. gemsfit_task.cpp(152). Initializing optimization init_optim(); 
 ... initializing optimization object in build_optim() ... 
 ... performing parameter normalization ... 
     Init guess [0] = -899506
     Upper Bound old [0]= -889506
     Upper Bound new [0]= -0.988883
     Init guess [1] = -1.10174e+06
     Upper Bound old [1]= -1.09174e+06
     Upper Bound new [1]= -0.990923
     Init guess [2] = -1.30581e+06
     Upper Bound old [2]= -1.29581e+06
     Upper Bound new [2]= -0.992342
     Init guess [3] = -487478
     Upper Bound old [3]= -477478
     Upper Bound new [3]= -0.979486
     Init guess [4] = -1.10617e+06
     Upper Bound old [4]= -1.09617e+06
     Upper Bound new [4]= -0.99096
     Init guess [0] = -899506
     Lower Bound old [0]= -909506
     Lower Bound new [0]= -1.01112
     Init guess [1] = -1.10174e+06
     Lower Bound old [1]= -1.11174e+06
     Lower Bound new [1]= -1.00908
     Init guess [2] = -1.30581e+06
     Lower Bound old [2]= -1.31581e+06
     Lower Bound new [2]= -1.00766
     Init guess [3] = -487478
     Lower Bound old [3]= -497478
     Lower Bound new [3]= -1.02051
     Init guess [4] = -1.10617e+06
     Lower Bound old [4]= -1.11617e+06
     Lower Bound new [4]= -1.00904
... assigning bounds and tolerance for optimization...

12. in gemsfit_task.cpp(287). Setting target (objective) function to minimize.
13. gemsfit_task.cpp(308). Performing optimization.
~ m.count.= 1 sum.res.= 5.57923096433241
~ m.count.= 2 sum.res.= 6.8670589338047
~ m.count.= 3 sum.res.= 6.61388628647724
~ m.count.= 4 sum.res.= 29.9369944328636
~ m.count.= 5 sum.res.= 9.15713133395295
~ m.count.= 6 sum.res.= 5.58048255124916
~ m.count.= 7 sum.res.= 5.89782900321243
~ m.count.= 8 sum.res.= 4.00842382573856
~ m.count.= 9 sum.res.= 12.3135220097474
~ m.count.= 10 sum.res.= 33.1160619181423
~ m.count.= 11 sum.res.= 5.58667041002177
~ m.count.= 12 sum.res.= 4.4614405860102
~ m.count.= 13 sum.res.= 1.48550660801488
~ m.count.= 14 sum.res.= 1.59541410290852
~ m.count.= 15 sum.res.= 1.90843818712275
~ m.count.= 16 sum.res.= 1.66130764849429
~ m.count.= 17 sum.res.= 1.91345821732499
~ m.count.= 18 sum.res.= 1.54068673050904
~ m.count.= 19 sum.res.= 1.45528236546289
~ m.count.= 20 sum.res.= 1.57764284099835
~ m.count.= 21 sum.res.= 1.35770531277535
~ m.count.= 22 sum.res.= 1.24150879729361
~ m.count.= 23 sum.res.= 1.21081390121399
~ m.count.= 24 sum.res.= 1.22349149944188
~ m.count.= 25 sum.res.= 1.19645481857426
~ m.count.= 26 sum.res.= 1.19849900834745
~ m.count.= 27 sum.res.= 1.26771077144651
~ m.count.= 28 sum.res.= 1.16740269305061
~ m.count.= 29 sum.res.= 1.14639215162329
~ m.count.= 30 sum.res.= 1.13674374854001
~ m.count.= 31 sum.res.= 1.14671751094485
~ m.count.= 32 sum.res.= 1.13205559307529
~ m.count.= 33 sum.res.= 1.12850686078883
~ m.count.= 34 sum.res.= 1.12970182757646
~ m.count.= 35 sum.res.= 1.11981723046729
~ m.count.= 36 sum.res.= 1.11723737336392
~ m.count.= 37 sum.res.= 1.11411087479597
~ m.count.= 38 sum.res.= 1.11268075755837
~ m.count.= 39 sum.res.= 1.11320063751333
~ m.count.= 40 sum.res.= 1.1190624150565
~ m.count.= 41 sum.res.= 1.11245290341462
~ m.count.= 42 sum.res.= 1.11458881029245
~ m.count.= 43 sum.res.= 1.11495224144554
~ m.count.= 44 sum.res.= 1.1116832385817
~ m.count.= 45 sum.res.= 1.11385712767617
~ m.count.= 46 sum.res.= 1.11192982605399
~ m.count.= 47 sum.res.= 1.11156666159932
~ m.count.= 48 sum.res.= 1.11181019478089
~ m.count.= 49 sum.res.= 1.11139886851027
~ m.count.= 50 sum.res.= 1.11174880494423
~ m.count.= 51 sum.res.= 1.11105679321869
~ m.count.= 52 sum.res.= 1.11093433107862
~ m.count.= 53 sum.res.= 1.11093564851457
~ m.count.= 54 sum.res.= 1.11089328345815
~ m.count.= 55 sum.res.= 1.11083869623385
~ m.count.= 56 sum.res.= 1.11117526436934
~ m.count.= 57 sum.res.= 1.11142413797586
~ m.count.= 58 sum.res.= 1.11131141196418
optv[0] = -1.00175601245055
size of optv = 5
14. gemsfit_task.cpp(317). Finished optimization; 
~ m.count.= 59 sum.res.= 1.1112971787087
found minimum at <<f( -1.00175601245055 -1.00422195150902 -1.00093206016739 -0.99572481450665 -1.00043836601428 ) = 1.11083869623385
 after 59 evaluations.

15. Back in main.cpp(122). Performing statistics ...
~ m.count.= 60 sum.res.= 1.11187791230453
~ m.count.= 61 sum.res.= 1.11161189343348
~ m.count.= 62 sum.res.= 1.11271663865069
~ m.count.= 63 sum.res.= 1.11161350233487
~ m.count.= 64 sum.res.= 1.12007948398711
~ m.count.= 65 sum.res.= 1.12194134252933
~ m.count.= 66 sum.res.= 1.11115803409284
~ m.count.= 67 sum.res.= 1.11229669565868
~ m.count.= 68 sum.res.= 1.11061233458678
~ m.count.= 69 sum.res.= 1.11051131164481
~ m.count.= 70 sum.res.= 1.11064402501338
16. main.cpp(152): finished in 49.348444 seconds. GEMSFITS: End. Bye!
