01. main.cpp(108). Creating new TGfitTask
02. data_manager.cpp(51). Reading database parameter get_db_specs(); 
03. data_manager.cpp(55). Getting data form the EJDB database; 
05. data_manager.cpp(365). Adding the data returned by the selection query into the data structure; 
04. data_manager.cpp(58). Getting distinct T and P pairs; 
09. optimization.cpp(48). Reading NLopt optimization settings from the input file; 
10. gemsfit_task.cpp(94). Initializing the Target function structure & get_DatTarget(); 
06. gemsfit_task.cpp(89). Initializing nodes with the experimental data; 
07. gemsfit_task.cpp(92). Initializing optimization structure; 
11. gemsfit_task.cpp(152). Initializing optimization init_optim(); 
 ... initializing optimization object in build_optim() ... 
 ... performing parameter normalization ... 
     Init guess [0] = -1.94046e+06
     Upper Bound old [0]= -1.93046e+06
     Upper Bound new [0]= -0.994847
     Init guess [1] = -1.39777e+06
     Upper Bound old [1]= -1.38777e+06
     Upper Bound new [1]= -0.992846
     Init guess [2] = -1.58055e+06
     Upper Bound old [2]= -1.57055e+06
     Upper Bound new [2]= -0.993673
     Init guess [0] = -1.94046e+06
     Lower Bound old [0]= -1.95046e+06
     Lower Bound new [0]= -1.00515
     Init guess [1] = -1.39777e+06
     Lower Bound old [1]= -1.40777e+06
     Lower Bound new [1]= -1.00715
     Init guess [2] = -1.58055e+06
     Lower Bound old [2]= -1.59055e+06
     Lower Bound new [2]= -1.00633
... assigning bounds and tolerance for optimization...

12. in gemsfit_task.cpp(287). Setting target (objective) function to minimize.
13. gemsfit_task.cpp(308). Performing optimization.
~ m.count.= 1 sum.res.= 2.04343564102176
~ m.count.= 2 sum.res.= 3.24365640619046
~ m.count.= 3 sum.res.= 4.9421851237187
~ m.count.= 4 sum.res.= 3.54079421214157
~ m.count.= 5 sum.res.= 0.606764605165482
~ m.count.= 6 sum.res.= 10.7473397069238
~ m.count.= 7 sum.res.= 1.25233129825439
~ m.count.= 8 sum.res.= 5.11173894125228
~ m.count.= 9 sum.res.= 0.418762963164681
~ m.count.= 10 sum.res.= 0.594182610793146
~ m.count.= 11 sum.res.= 0.573740626017658
~ m.count.= 12 sum.res.= 0.52504028280163
~ m.count.= 13 sum.res.= 0.447281221938342
~ m.count.= 14 sum.res.= 0.426137619082092
~ m.count.= 15 sum.res.= 0.451724619715569
~ m.count.= 16 sum.res.= 0.417879001901155
~ m.count.= 17 sum.res.= 0.410515345323451
~ m.count.= 18 sum.res.= 0.425296272705044
~ m.count.= 19 sum.res.= 0.411707704851699
~ m.count.= 20 sum.res.= 0.416250681003369
~ m.count.= 21 sum.res.= 0.416597457216855
~ m.count.= 22 sum.res.= 0.410884412773701
~ m.count.= 23 sum.res.= 0.417349960539609
~ m.count.= 24 sum.res.= 0.410618594660778
optv[0] = -1.00253933115918
size of optv = 3
14. gemsfit_task.cpp(317). Finished optimization; 
~ m.count.= 25 sum.res.= 0.410563553630377
found minimum at <<f( -1.00253933115918 -0.99946613094338 -0.998580027936805 ) = 0.410515345323451
 after 25 evaluations.

15. Back in main.cpp(122). Performing statistics ...
~ m.count.= 26 sum.res.= 0.417277640008328
~ m.count.= 27 sum.res.= 0.418795354200884
~ m.count.= 28 sum.res.= 0.416394896690747
~ m.count.= 29 sum.res.= 0.418838510187071
~ m.count.= 30 sum.res.= 0.411180208871648
~ m.count.= 31 sum.res.= 0.412210875164859
~ m.count.= 32 sum.res.= 0.410685574884666
16. main.cpp(152): finished in 44.66477 seconds. GEMSFITS: End. Bye!
