01. main.cpp(108). Creating new TGfitTask
02. data_manager.cpp(51). Reading database parameter get_db_specs(); 
03. data_manager.cpp(55). Getting data form the EJDB database; 
05. data_manager.cpp(365). Adding the data returned by the selection query into the data structure; 
04. data_manager.cpp(58). Getting distinct T and P pairs; 
09. optimization.cpp(48). Reading NLopt optimization settings from the input file; 
10. gemsfit_task.cpp(94). Initializing the Target function structure & get_DatTarget(); 
06. gemsfit_task.cpp(89). Initializing nodes with the experimental data; 
07. gemsfit_task.cpp(92). Initializing optimization structure; 
11. gemsfit_task.cpp(152). Initializing optimization init_optim(); 
 ... initializing optimization object in build_optim() ... 
 ... performing parameter normalization ... 
<<<<<<< .mine
     Init guess [0] = -1.21232e+006
     Upper Bound old [0]= -1.09109e+006
     Upper Bound new [0]= -0.9
     Init guess [1] = -822598
     Upper Bound old [1]= -740338
     Upper Bound new [1]= -0.9
     Init guess [2] = -1.02225e+006
     Upper Bound old [2]= -920025
     Upper Bound new [2]= -0.9
     Init guess [3] = 160285
     Upper Bound old [3]= 176314
     Upper Bound new [3]= 1.1
     Init guess [0] = -1.21232e+006
     Lower Bound old [0]= -1.33356e+006
     Lower Bound new [0]= -1.1
     Init guess [1] = -822598
     Lower Bound old [1]= -904858
     Lower Bound new [1]= -1.1
     Init guess [2] = -1.02225e+006
     Lower Bound old [2]= -1.12448e+006
     Lower Bound new [2]= -1.1
     Init guess [3] = 160285
     Lower Bound old [3]= 144256
     Lower Bound new [3]= 0.9
=======
     Init guess [0] = -1.94046e+06
     Upper Bound old [0]= -1.93046e+06
     Upper Bound new [0]= -0.994847
     Init guess [1] = -1.39777e+06
     Upper Bound old [1]= -1.38777e+06
     Upper Bound new [1]= -0.992846
     Init guess [2] = -1.58055e+06
     Upper Bound old [2]= -1.57055e+06
     Upper Bound new [2]= -0.993673
     Init guess [0] = -1.94046e+06
     Lower Bound old [0]= -1.95046e+06
     Lower Bound new [0]= -1.00515
     Init guess [1] = -1.39777e+06
     Lower Bound old [1]= -1.40777e+06
     Lower Bound new [1]= -1.00715
     Init guess [2] = -1.58055e+06
     Lower Bound old [2]= -1.59055e+06
     Lower Bound new [2]= -1.00633
>>>>>>> .r576
... assigning bounds and tolerance for optimization...

12. in gemsfit_task.cpp(287). Setting target (objective) function to minimize.
13. gemsfit_task.cpp(308). Performing optimization.
<<<<<<< .mine
~ m.count.= 1 sum.res.= 1.59123969786254
~ m.count.= 2 sum.res.= 25.7841821211376
~ m.count.= 3 sum.res.= 3.38105719858774
~ m.count.= 4 sum.res.= 5.17782229021608
~ m.count.= 5 sum.res.= 8.32475646743377
~ m.count.= 6 sum.res.= 2612.20089982366
~ m.count.= 7 sum.res.= 1199.35417211715
~ m.count.= 8 sum.res.= 2139.87706374179
~ m.count.= 9 sum.res.= 27.5836792959366
~ m.count.= 10 sum.res.= 263.883155875571
~ m.count.= 11 sum.res.= 84.5934267671798
~ m.count.= 12 sum.res.= 16.5148405870359
~ m.count.= 13 sum.res.= 8.01899321600737
~ m.count.= 14 sum.res.= 2.7427878613783
~ m.count.= 15 sum.res.= 1.48479046724543
~ m.count.= 16 sum.res.= 1.93344191929016
~ m.count.= 17 sum.res.= 1.44952747657475
~ m.count.= 18 sum.res.= 1.55916648944242
~ m.count.= 19 sum.res.= 1.55046571807186
~ m.count.= 20 sum.res.= 1.46348610319098
~ m.count.= 21 sum.res.= 1.42524189705987
~ m.count.= 22 sum.res.= 1.39755787927022
~ m.count.= 23 sum.res.= 1.48607745315707
~ m.count.= 24 sum.res.= 1.40616187645878
~ m.count.= 25 sum.res.= 1.4221784389967
~ m.count.= 26 sum.res.= 1.40497561728085
~ m.count.= 27 sum.res.= 1.3915864612849
~ m.count.= 28 sum.res.= 1.38892328843637
~ m.count.= 29 sum.res.= 1.38717901801145
~ m.count.= 30 sum.res.= 1.39027496687363
~ m.count.= 31 sum.res.= 1.38734969492736
~ m.count.= 32 sum.res.= 1.38652479135081
~ m.count.= 33 sum.res.= 1.38453021617494
~ m.count.= 34 sum.res.= 1.38393233526742
~ m.count.= 35 sum.res.= 1.38110108592474
~ m.count.= 36 sum.res.= 1.38207467966883
~ m.count.= 37 sum.res.= 1.37823419268625
~ m.count.= 38 sum.res.= 1.37738483582507
~ m.count.= 39 sum.res.= 1.37629189243908
~ m.count.= 40 sum.res.= 1.37470195235203
~ m.count.= 41 sum.res.= 1.37221208129624
~ m.count.= 42 sum.res.= 1.36887989107414
~ m.count.= 43 sum.res.= 1.35647552632562
~ m.count.= 44 sum.res.= 1.35132715958318
~ m.count.= 45 sum.res.= 1.35084575557808
~ m.count.= 46 sum.res.= 1.34810284467704
~ m.count.= 47 sum.res.= 1.33636648803659
~ m.count.= 48 sum.res.= 1.34403761315606
~ m.count.= 49 sum.res.= 1.33843675251553
~ m.count.= 50 sum.res.= 1.33600262781066
~ m.count.= 51 sum.res.= 1.3372608660385
~ m.count.= 52 sum.res.= 1.34228687543187
~ m.count.= 53 sum.res.= 1.34044657933623
~ m.count.= 54 sum.res.= 1.33498212820974
~ m.count.= 55 sum.res.= 1.33658699738685
~ m.count.= 56 sum.res.= 1.33510888330632
~ m.count.= 57 sum.res.= 1.33563636543948
~ m.count.= 58 sum.res.= 1.33489765980574
~ m.count.= 59 sum.res.= 1.33571919920363
optv[0] = -1.00003858785569
size of optv = 4
=======
~ m.count.= 1 sum.res.= 5.68008488376712
~ m.count.= 2 sum.res.= 6.82568783309204
~ m.count.= 3 sum.res.= 9.94452517539987
~ m.count.= 4 sum.res.= 7.13586400519587
~ m.count.= 5 sum.res.= 3.95492075356225
~ m.count.= 6 sum.res.= 15.1168606984691
~ m.count.= 7 sum.res.= 5.53253599290171
~ m.count.= 8 sum.res.= 9.04161789332801
~ m.count.= 9 sum.res.= 3.15273327235702
~ m.count.= 10 sum.res.= 3.01727120446005
~ m.count.= 11 sum.res.= 3.06945713410702
~ m.count.= 12 sum.res.= 3.02483870038036
~ m.count.= 13 sum.res.= 3.0189434835379
~ m.count.= 14 sum.res.= 3.19670873520677
~ m.count.= 15 sum.res.= 2.96605806814085
~ m.count.= 16 sum.res.= 3.3288614961891
~ m.count.= 17 sum.res.= 2.92153129084303
~ m.count.= 18 sum.res.= 2.9810967899341
~ m.count.= 19 sum.res.= 3.32749269868583
~ m.count.= 20 sum.res.= 2.91156247113117
~ m.count.= 21 sum.res.= 2.9159081847376
~ m.count.= 22 sum.res.= 2.91434370674626
~ m.count.= 23 sum.res.= 2.92588924722943
~ m.count.= 24 sum.res.= 2.91972581497878
~ m.count.= 25 sum.res.= 2.92011455356897
~ m.count.= 26 sum.res.= 2.90810996883331
~ m.count.= 27 sum.res.= 2.90529571539271
~ m.count.= 28 sum.res.= 2.90898086636461
~ m.count.= 29 sum.res.= 2.90611184741795
optv[0] = -1.00267636739958
size of optv = 3
>>>>>>> .r576
14. gemsfit_task.cpp(317). Finished optimization; 
<<<<<<< .mine
~ m.count.= 60 sum.res.= 1.3348519931603
found minimum at <<f( -1.00003858785569 -1.00003128428686 -1.00013734101809 1.00335948363322 ) = 1.33489765980574
 after 60 evaluations.
=======
~ m.count.= 30 sum.res.= 2.90549995649038
found minimum at <<f( -1.00267636739958 -0.999319271098786 -0.997820152200426 ) = 2.90529571539271
 after 30 evaluations.
>>>>>>> .r576

15. Back in main.cpp(122). Performing statistics ...
<<<<<<< .mine
~ m.count.= 61 sum.res.= 1.33797541398391
~ m.count.= 62 sum.res.= 1.34061378561038
~ m.count.= 63 sum.res.= 1.33337259624147
~ m.count.= 64 sum.res.= 1.33903212823618
~ m.count.= 65 sum.res.= 1.32916349822385
~ m.count.= 66 sum.res.= 1.34610478093146
~ m.count.= 67 sum.res.= 1.3316721274479
~ m.count.= 68 sum.res.= 1.34034987699694
~ m.count.= 69 sum.res.= 1.33562658136817
16. main.cpp(152): finished in 71.9004 seconds. GEMSFITS: End. Bye!
=======
~ m.count.= 31 sum.res.= 2.93385359571695
~ m.count.= 32 sum.res.= 2.93678976359034
~ m.count.= 33 sum.res.= 2.91699394919187
~ m.count.= 34 sum.res.= 2.93597766023664
~ m.count.= 35 sum.res.= 2.90529427278639
~ m.count.= 36 sum.res.= 2.90566158315345
~ m.count.= 37 sum.res.= 2.90505073055783
16. main.cpp(152): finished in 55.701865 seconds. GEMSFITS: End. Bye!
>>>>>>> .r576
