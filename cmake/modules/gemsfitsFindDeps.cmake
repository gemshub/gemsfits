find_library(NLOPT_LIB nlopt)
if(NOT NLOPT_LIB)
   message(FATAL_ERROR "nlopt library not found")
endif()

if(DEFINED ENV{CONDA_PREFIX})
   find_package(Boost 1.83.0  REQUIRED COMPONENTS system)
   if (Boost_FOUND)
      INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
      ADD_DEFINITIONS( "-DHAS_BOOST" )
   else()
    message(FATAL_ERROR "Boost library not found")
   endif()
else()
   find_package(Boost REQUIRED COMPONENTS system)
   if (NOT Boost_FOUND)
      message(FATAL_ERROR "Boost library not found")
   endif()
endif()

if(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
find_package(Armadillo REQUIRED)
if(NOT Armadillo_FOUND)
     message(FATAL_ERROR "Armadillo library not found")
endif()
endif()

# Find OpenMP
find_package(OpenMP)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

if(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
  find_library(EJDB_LIB ejdb)
  if(NOT EJDB_LIB)
    message(FATAL_ERROR "ejdb library not found")
  endif()
endif()

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
find_library(YAML_LIB NAMES yaml-cpp yaml-cppd)
else()
find_library(YAML_LIB yaml-cpp)
endif()
if(NOT YAML_LIB)
  message(FATAL_ERROR "libyaml-cpp library not found")
endif()

if(BUILD_GUI)
  find_package(Qt6 COMPONENTS Core Gui Widgets Charts Concurrent PrintSupport Svg Help Sql )

  if(NOT Qt6_FOUND)
    find_package(Qt5 COMPONENTS Core Gui Widgets Charts Concurrent PrintSupport Svg Help Sql REQUIRED)
  endif()

  if(NOT Qt6_FOUND AND NOT Qt5_FOUND)
    message(FATAL_ERROR "Package Qt6 or Qt5 required, but not found!")
  endif()

if(Qt6_FOUND)
  set(GUI_QT_TARGETS Qt6::Widgets Qt6::Core Qt6::Gui Qt6::PrintSupport Qt6::Charts Qt6::Svg Qt6::Help Qt6::Sql)
  include_directories(${Qt6Core_INCLUDE_DIRS})
  include_directories(${Qt6Gui_INCLUDE_DIRS})
  include_directories(${Qt6Widgets_INCLUDE_DIRS})
  include_directories(${Qt6PrintSupport_INCLUDE_DIRS})
  include_directories(${Qt6Svg_INCLUDE_DIRS})
  include_directories(${Qt6Concurrent_INCLUDE_DIRS})
  include_directories(${Qt6Help_INCLUDE_DIRS})
  include_directories(${Qt6Sql_INCLUDE_DIRS})
elseif(Qt5_FOUND)
  set(GUI_QT_TARGETS Qt5::Widgets Qt5::Core Qt5::Gui Qt5::PrintSupport Qt5::Charts Qt5::Svg Qt5::Help Qt5::Sql)
  include_directories(${Qt5Core_INCLUDE_DIRS})
  include_directories(${Qt5Gui_INCLUDE_DIRS})
  include_directories(${Qt5Widgets_INCLUDE_DIRS})
  include_directories(${Qt5PrintSupport_INCLUDE_DIRS})
  include_directories(${Qt5Svg_INCLUDE_DIRS})
  include_directories(${Qt5Concurrent_INCLUDE_DIRS})
  include_directories(${Qt5Help_INCLUDE_DIRS})
  include_directories(${Qt5Sql_INCLUDE_DIRS})
endif()
endif()
