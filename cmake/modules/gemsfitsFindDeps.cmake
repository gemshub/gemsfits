find_library(NLOPT_LIB nlopt)
if(NOT NLOPT_LIB)
   message(FATAL_ERROR "nlopt library not found")
endif()

if(DEFINED ENV{CONDA_PREFIX})
   find_package(Boost 1.83.0  REQUIRED COMPONENTS system)
   if (Boost_FOUND)
      INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
      ADD_DEFINITIONS( "-DHAS_BOOST" )
   else()
    message(FATAL_ERROR "Boost library not found")
   endif()
else()
   find_package(Boost REQUIRED COMPONENTS system)
   if (NOT Boost_FOUND)
      message(FATAL_ERROR "Boost library not found")
   endif()
endif()

if(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
find_package(Armadillo REQUIRED)
if(NOT Armadillo_FOUND)
     message(FATAL_ERROR "Armadillo library not found")
endif()
endif()

# Find OpenMP
find_package(OpenMP)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

if(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
  if(USE_OLD_EJDB MATCHES ON)
    find_library(EJDB_LIB ejdb)
    if(NOT EJDB_LIB)
       message(FATAL_ERROR "ejdb library not found")
    endif()
  else()
    find_library(EJDB2_LIB ejdb2)
    if(NOT EJDB2_LIB)
       message(FATAL_ERROR "ejdb2 library not found")
    endif()
  endif()
endif()

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
   find_library(YAML_LIB NAMES yaml-cpp yaml-cppd)
else()
   find_library(YAML_LIB yaml-cpp)
endif()
if(NOT YAML_LIB)
   message(FATAL_ERROR "libyaml-cpp library not found")
endif()

if(USE_THERMOFUN MATCHES ON)
  find_package(ThermoFun REQUIRED)
  if(NOT ThermoFun_FOUND)
    message(FATAL_ERROR "ThermoFun library not found")
  else()
    message(STATUS "Found ThermoFun v${ThermoFun_VERSION}")
  endif()

  find_package(ChemicalFun REQUIRED)
  if(NOT ChemicalFun_FOUND)
    message(FATAL_ERROR "ChemicalFun library not found")
  else()
    message(STATUS "Found ChemicalFun v${ChemicalFun_VERSION}")
  endif()
endif()

find_package(GEMS3K REQUIRED)
if(NOT GEMS3K_FOUND)
   message(FATAL_ERROR "GEMS3K library not found")
else()
   message(STATUS "Found GEMS3K v${GEMS3K_VERSION}")
endif()

if(USE_SPDLOG_PRECOMPILED MATCHES ON)
 if(NOT TARGET spdlog::spdlog)
    find_package(spdlog CONFIG REQUIRED)
    if(NOT spdlog_FOUND)
       message(FATAL_ERROR "spdlog library not found")
    else()
       message(STATUS "Found spdlog v${spdlog_VERSION}")
    endif()
  else()
   message(STATUS "Found spdlog v${spdlog_VERSION}")
  endif()
endif()
