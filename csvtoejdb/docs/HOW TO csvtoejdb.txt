The csvtoejdb is a utility program for import of experimental data into a JSON-format file
with its subsequent import into EJDB database to be used in GEMSFIT2 code. The program can 
also backup such EJDB GEMSGIT2 database of experimental data into JSON text file(s), and 
restore the EJDB GEMSGIT2 database from the backup JSON text files. 

csvtoejdb is written by Dan Miron (URL) as part of the GEMSFIT2 project (URL).  
Uses boost (URL) and jansson (URL) external libraries and EJDB (URL) coupled libary.

How to use csvtoejdb:

1. Prepare your data in a preformatted excel file. See excel_example.xls or solcahs_example.xlsx 
   (for CASH systems) as a template.

The column names and their order in the excel table should follow as described below, grouped in 
three sections: EXPERIMENTS DESCRIPTION; SYSTEM COMPOSITION; RESULTS. 

Column name		Explanation
EXPERIMENTS DESCRIPTION:
id 			Numbering of experiments 1, 2, 3, ...
sample			Sample names / names of experimental runs (alphanumeric), must be 
				unique within a given experimental dataset
comment			Comments to experiments (optional column)
type			Type of experiment (optional column)
sT			Temperature in degrees Celsius
sP			Pressure in bars
expdataset		Name of this experimental data set (alphanumeric), 
				should be the same for all samples belonging to a given set.   
SYSTEM COMPOSITION:
comp.<formula> 		Composition of the sample system, expressed as one or several columns 
			with names in the format: comp.SiO2, comp.CaO, comp.NaCl ...
error                   error estimate (value can be left blank, if unknown) for the preceding 
				value of the composition
unit			units of measurement for the preceding value [and error], should be given
			as g (grams of oxide) or M (mole) for (NaCl). <???>

RESULTS - phase properties from experiments:
phase.<pname>.<pprop>	pname should correspond to the name of this phase in GEMS3K DCH file.
			pprop is one of keywords designating a bulk phase property, currently
			   implemented are: 
			   pQnt: phase qunatity; 
			   pV: phase volume;
			   RHO: phase density;	 
			   pH: pH (aqueous phase only); 
			   Eh: Eh (aqueous phase only); 
			   IS: effective ionic strength (aqueous phase only); 
			   alk: alkalinity (aqueous phase only); 
			   sArea: phase surface area; 
			   ... 
			Examples: phase.aq_gen.pH; phase.C-S-H-3T-2.pQnt
error                   error estimate (value can be left blank, if unknown) for the preceding 
			   value of the phase property
unit			units of measurement for the preceding value [and error] of the phase 
			   property.for pH: -loga (negated log); for pV: cm3 or m3; 
			   for pQnt: g or kg; for RHO: g/cm3; 
			   ... 
			
RESULTS - phase composition from experiments:	
phase.<pname>.<ename>.	Experimental concentration of element <ename> in the phase <pname>. 
			pname should correspond to the name of this phase in GEMS3K DCH file.
			ename is name (symbol) of element (Independent Component) as in GEMS3K.
			Example: phase.aq_gen.Si 
error                   error estimate (value can be left blank, if unknown) for the preceding 
			   value of the element concentration in phase.  
unit			units of measurement for the preceding value [and error] 
			   for aqueous phases: molal; loga (log of molality); 
			   for solid phases: mol (in moles); molfrac (mole fraction); 
			   simolfrac (mole ratio to Si, for Si-containing cement phases). 

phase.<pname>.Dc<dfor>. Experimental property of species <dfor> in the phase <pname>. 			 
			pname should correspond to the name of this phase in GEMS3K DCH file.
			dfor is the formula of species (Dependent Component) belonging to 
			   this phase. The following properties can be used after <dfor>. :
			pQnt: concentration in mole fraction (molfrac);
			@coef: activity coefficient;
			...
error                   error estimate (value can be left blank, if unknown) for the preceding 
			   value of the phase species property.  
unit			units of measurement for the preceding value [and error]: 
			   for pQnt: molfrac (mole fraction); for @coef: ???? 
			Example: phase.aq_gen.DcSiO2-.pQnt

IMPORTANT:
Each sample (row) must have a unique combination of sample and expdataset names.
If present, the column 'unit' should be after the column 'error' that should come after 
the column containing the respective property value, e.g. phase.aq_gen.pH | error | unit | ...
Names of phases, components, elements should be the same as in the GEMS3K DCH I/O files.

2. Export your Excel table into the comma-separated format ',' csv file. Check that 
the cell values are saved in full, e.g. as 0.1234567 and not as 0.123 (as visible).

3. In the terminal, cd to folder with the program csvtoejdb, and execute it 
with command-line arguments <action> <mode> <db-folder> <db-name> <coll-name> <input_csv_file>
where: 
   <action> is 	-run	import data from the .csv file to the database
		-back	backup the whole collection/database into JSON text file(s)
 		-rest	restore the collection/database from the JSON text file(s)
   <mode>   is 	-t  	truncate (overwrite the existing database)
		-a 	append (add more data to the existing database)	
   <db-folder> 		path to the folder where the CSV and database files are located
   <db-name> 		name of the database (will be created if not exists)
   <coll-name>		name of the collection
   <input_csv_file>	name of the input CSV file (relative to db_folder)

The program csvtoejdb will also write a <db-name>_<coll-name>.json file in JSON format. 
Example call for data import:

  $ csvtoejdb -run -t /CASH solcash experiments CASH.csv 

The file "CASH.csv" must be either in the "CASH" subfolder or in the same folder where
the csvtoejdb executable file is located. The files "solcash" and "solcash_experiments" 
in the /CASH subfolder will result.  

4. To backup a collection, run the program as in the example below:

   $ csvtoejdb -back /SOL solcash experiments

The file "solcash_experiments.json" will be the result. 

5. To restore a database/collection from a json file backup, run the program as: 

   $ csvtoejdb -rest /SOL solcash_experiments.json experiments"

The files "solcash" and "solcash_experiments" in the /SOL subfolder will result.

6. Return codes and error messages

.....

.....
