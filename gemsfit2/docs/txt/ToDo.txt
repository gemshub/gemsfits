Roadmap of GEMSFIT2 development

+ completed or partially completed
- to be completed

- add artificial weight column in database in gemsfit2??

+ save current code tree to GEMSFIT1013 tag
+ move devDanFit branch to new trunk, clean it up, improve html documentation
+ fork devPhaFit branch from trunk, merge trunk standalone from devPhase standalone
+ check necessary extensions in GEMSFIT2 and cvstoejdb due to extended .IPM file parameter arrays
+ propagate to GEMSFIT2 documentation, wherever necessary    

+ describe/document command line parameters to start gemsfit2 and csvtoejdb utility program
+ check if GEMSFIT input file exists by writing a new template input file (to prevent overwrite)
+ documentation in the GEMSFIT template input file (fitting bulk composition with L linked parameters) 
+ write all possible options the user has for the data to compare
- see more possible errors and add them to the gemfit_error function
+ problem in csvtoejdb tool when adding the same pair of sample and expdataset - the program should skip it and not add it again to the database.

+ Printing class - printing in /results/FIT_results.csv
- test inverse weighting more
+ add normalized target function (by average from experimental data)
+ add documentation for normalized target function
+ solid-solution composition as element bulk phase concentration
- test solid-solution with solchas
+ test the reaction constraint 
- also test if logk is respected at higher temperatures
- test interaction parameters

- problems with GEMS convergence - can affect the convergence as BOBYQA - decides how to change parameters based on first residuals

- type of data to compare (molality and log molality) etc...
+ add density for data to compare.
+ add DMc, fDQF parameters (needs merge from devPhase first)
+ check Tk and P - if implemented
- make test for Linked parameters - simple pH titration system
- make test of geobarometry with qtz rutile paper.
+ added phase amount, phase volume, dcomp amount, dcomp activity coeficient
- not added Eh, osmotic coeficient.
- think about units, how to make a uniform strategy for units.

+ add bulk composition as parameters 
+ work on L (linked) type parameters  

+ look over the statistics !! think about the weighting matrix problem in the Var/Cov calculation.


+ make a separate RUN function in TGfittask so one can access the data manager and calculate statistics before the fitting procedure.
+ make statistics for the reaction dependent parameters as the statistics are fit independent - just add the parameters into the statistics parameter vector.


EJDB database maintenance functionality:
+ try installing ejdb console via nodejs (as given on ejdb.org)
+ the sense of 'collection': as a modeling application project name? as experimental dataset? any other semantics? 
+ backup to JSON text file (the whole DB, one exp.dataset, etc.)
+ restore from JSON text file
+ updating/owerwriting documents e.g. for error corrections in experimental data, adding new information for experimental samples. <= use EJDB command line interface.
- what if one wants to select data from more collections


- add different options for monte carlo simulation (add scatter to computed values or measured values or use the actual residuals and randomly add them to the data pg.108)
- implement the Tukey-Biweight scheme to weight out the outlighers.
- maybe write matlab scripts for ploting form gemsfit output files??
- add option of adding weight for different type of data.
- "dynamic regression run" when some parameters are correlated, with different input file for the different sets of parameters. 1st fits one set with the other fixed, then fits the 2nd with first
	fixed in a loop (unitl ??)


future
- iterative regresion
- 2-3 step regrestion: 1 - using global algoritm; 2 - using local algorithm.
- Bayesian linear regression

