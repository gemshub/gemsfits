message(STATUS "Building gem-fits-shell")
file(COPY "${CMAKE_SOURCE_DIR}/Resources" DESTINATION "${CMAKE_BINARY_DIR}/bin")

find_package(Threads REQUIRED)
# Enable automatic creation of a module definition (.def) file for a SHARED library on Windows.
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/dataman)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/dialogs)
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# Recursively collect all header files
file(GLOB_RECURSE HEADER_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.hpp *.h)
file(GLOB COMMON_HEADER_FILES ${COMMON_DIR}/*.h)

# Recursively collect all source files
file(GLOB_RECURSE SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp)
file(GLOB COMMON_SOURCE_FILES ${COMMON_DIR}/*.cpp)

file(GLOB QRC_FILES *.qrc)
qt_add_resources(GEMSFITS_SRCS ${QRC_FILES})

set(GEMSFITS_SHELL_SOURCES
 ${HEADER_FILES} ${SOURCE_FILES}
 ${GEMSFITS_SRCS}
 ${COMMON_HEADER_FILES} ${COMMON_SOURCE_FILES} )

if (WIN32)
    set(app_icon_resource_windows "${CMAKE_CURRENT_SOURCE_DIR}/gem-fits-shell.rc")
    qt_add_executable(gem-fits-shell ${GEMSFITS_SHELL_SOURCES} ${app_icon_resource_windows})

elseif (APPLE)
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE gems3.icns)

    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${PROJECT_SOURCE_DIR}/Resources/gems3.icns")
    set_source_files_properties(${app_icon_macos} PROPERTIES
           MACOSX_PACKAGE_LOCATION "Resources")

    qt_add_executable(gem-fits-shell MACOSX_BUNDLE ${GEMSFITS_SHELL_SOURCES} ${app_icon_macos})

    set_target_properties(gem-fits-shell PROPERTIES
        MACOSX_BUNDLE_GUI_IDENTIFIER ch.psi.gems-fits
        MACOSX_BUNDLE_COPYRIGHT  "Copyright (c) 2004-2025 GEMS Development Team"
        MACOSX_BUNDLE_ICON_FILE gems3.icns
        MACOSX_BUNDLE_INFO_STRING "GEM Input Parameter Optimization and Inverse Modelling"
        MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
        MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
        MACOSX_BUNDLE TRUE
    )

else()
    qt_add_executable(gem-fits-shell ${GEMSFITS_SHELL_SOURCES})
    #install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/gem-fits-shell.desktop DESTINATION share/applications)
    #install(FILES ${PROJECT_SOURCE_DIR}/Resources/gem-fits-shell.png DESTINATION share/icons)
endif()

target_link_libraries(gem-fits-shell PRIVATE Qt6::Widgets Qt6::Core Qt6::Gui Qt6::PrintSupport Qt6::Charts Qt6::Svg Qt6::Help Qt6::Sql)
#target_link_libraries(gem-fits-shell PRIVATE GEMS3K::GEMS3K)

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
     target_link_libraries(gem-fits-shell PRIVATE GEMS3K::GEMS3K-static ${EJDB_WIN_LIB} yaml-cpp Threads::Threads)
else()
     target_link_libraries(gem-fits-shell PRIVATE GEMS3K::GEMS3K ${EJDB_LIB} yaml-cpp Threads::Threads)
endif()

install(TARGETS gem-fits-shell
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
)


if(DEFINED ENV{CONDA_PREFIX})

message(STATUS "conda path: $ENV{CONDA_PREFIX}")

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)

    set(dll_path "C:/Miniconda/envs/gemsfits/Library/bin")
    message(STATUS "dll path: ${dll_path}")
    install(FILES "${dll_path}/GEMS3K.dll" DESTINATION bin)
    install(FILES "${dll_path}/ChemicalFun.dll" DESTINATION bin)
    install(FILES "${dll_path}/ThermoFun.dll" DESTINATION bin)
    install(FILES "${dll_path}/fmt.dll" DESTINATION bin)
    install(FILES "${dll_path}/zlib.dll" DESTINATION bin)

    install(FILES "${dll_path}/gssapi64.dll" DESTINATION bin)
    install(FILES "${dll_path}/libsodium.dll" DESTINATION bin)
    install(FILES "${dll_path}/spdlog.dll" DESTINATION bin)
    install(FILES "${dll_path}/libpng16.dll" DESTINATION bin)

    install(FILES "${dll_path}/double-conversion.dll" DESTINATION bin)
    install(FILES "${dll_path}/pcre2-16.dll" DESTINATION bin)
    install(FILES "${dll_path}/freetype.dll" DESTINATION bin)
    install(FILES "${dll_path}/zstd.dll" DESTINATION bin)

    install(FILES "${dll_path}/krb5_64.dll" DESTINATION bin)
    install(FILES "${dll_path}/comerr64.dll" DESTINATION bin)
    install(FILES "${dll_path}/k5sprt64.dll" DESTINATION bin)

    install(FILES "${dll_path}/vcruntime140.dll" DESTINATION bin)
    install(FILES "${dll_path}/msvcp140.dll" DESTINATION bin)
    install(FILES "${dll_path}/opengl32sw.dll" DESTINATION bin)
    install(FILES "${dll_path}/sqlite3.dll" DESTINATION bin)

    install(FILES "${dll_path}/yaml-cpp.dll" DESTINATION bin)
    install(FILES "${EJDB_DIR}/bin/{EJDB_WIN_LIB}.dll" DESTINATION bin)
endif()

endif()

qt_generate_deploy_app_script(
    TARGET gem-fits-shell
    OUTPUT_SCRIPT deploy_script
    NO_TRANSLATIONS
    NO_UNSUPPORTED_PLATFORM_ERROR
)
install(SCRIPT ${deploy_script})

